(print "Задача 1")

;Задача №1. Определите FUNCALL через функционал APPLY.

(defun -funcall (f &rest x) ; &rest значит переменное количество переменных
    (apply f x) ; apply применяет функцию к списку аргументов
)

(print(-funcall '+ 1 2 3 4))

(print "Задача 3")

;Задача №3.Определите функционал (APL-APPLY f x), который применяет каждую функцию fi списка (f1 f2 ... fn) к соответствующему элементу списка x = (x1 x2 ... xn) и возвращает список, сформированный из результатов.

(defun apl-apply (f x)
    (mapcar 'apply f x) ; mapcar применение функции к последовательности с элементами списка
)

(print (apl-apply '(+ -) '((1 2) (4 3))))

(print "Задача 5")

;Задача №5.Определите функциональный предикат (НЕКОТОРЫй пред список), который истинен, когда, являющийся функциональным аргументом предикат пред истинен хотя бы для одного элемента списка список.

(defun некоторый (p lst) 
    (cond ((null lst) nil) ;если дошли до конца списка то ложь
        ((funcall p (car lst)) T) ; если верно на одном элементе то истина
        (t (некоторый p (cdr lst))) ;рекурсия
    )
)
 
(print(некоторый #'numberp '(1 2 3 5 7))) ; numberp предикат проверяет является ли числом
(print(некоторый #'numberp '(A B)))

(print "Задача 7")

;Задача №7. Определите фильтр (УДАЛИТЬ-ЕСЛИ-НЕ пред список), удаляющий из списка список все элементы, которые не обладают свойством, наличие которого проверяет предикат пред.

(defun удалить-если-не (p lst)
    ((lambda (f r)
    (cond ((null lst) nil)
        ((funcall p f) (cons f (удалить-если-не p r))) ;если предикат истинен на элементе, то составляем список из этого элемента и дальше проверяем на хвосте списка
        ((удалить-если-не p r))
        ))
        (car lst)
        (cdr lst)
    )
)
 
(print(удалить-если-не #'numberp '(1 A 3 B 5 6 7)))

(print "Задача 9")

;Задача №9.Напишите генератор порождения чисел Фибоначчи: 0, 1, 1, 2, 3, 5, ...

(defun fibonacci (n &optional (a 0) (b 1)) ; optional необязательные параметры
    (cond ((= n 0) nil)
        (t (cons a (fibonacci (1- n) b (+ a b))))
    )
)
    
(print(fibonacci 6))

(print "Задача 11")

;Задача №11. Определите фукнционал МНОГОФУН, который использует функции, являющиеся аргументами, по следующей схеме: (МНОГОФУН ’(f g ... h) x) ⇔ (LIST (f x) (g x) ... (h x)).

(defun многофун (f x)
    (mapcar #'(lambda (f) (apply f x)) f) ; mapcar вычисляет функцию на элементах списка
)

(print(многофун '(+ -) '(1 2)))

(print "Задача 13")

;Задача №13. Определите функцию, котораяя возвращает в качестве значения свое определение (лямбда-выражение)

(setq само ;лямбда-выражение, примененное к такому же лямбда-выражению с формой QUOTE, т.е. это лямбда-вызов
    ((lambda (x) (list x (list 'quote x))) 
    '(lambda (x) (list x (list 'quote x))))
) 
 
(print само)